1. **Certification**
I have obtained the AWS Cloud Practitioner certification. This provided me with an introduction to the AWS cloud ecosystem. 

2. **HTML**
My resume is written entirely in HTML, ensuring it is web-ready and structured properly for online deployment.

3. **CSS**
The resume is styled with CSS, which adds basic visual structure and aesthetics. While I kept the design simple, it visually enhances the HTML.

4. **Static Website**
I deployed my HTML resume as a static website using Amazon S3. This ensures that the resume is hosted directly from AWS storage.

5. **HTTPS**
The S3 website uses HTTPS for secure access. To achieve this, I configured Amazon CloudFront as a content delivery network (CDN) with SSL.

6. **DNS**
I have connected a custom domain to the CloudFront distribution, ensuring my resume is accessible via a personalized domain name.

7. **JavaScript**
I implemented a visitor counter using JavaScript, which tracks how many people visit my resume site.

8. **Database**
The visitor counter updates its count using Amazon DynamoDB as the backend database, ensuring persistent and scalable data storage.

9. **API**
I created an API to interact with DynamoDB using AWS API Gateway and Lambda. The API handles requests from the web page to retrieve and update the visitor count.

10. **Python**
In the Lambda function, I wrote Python code that interacts with DynamoDB using the boto3 library. This code efficiently handles the back-end logic for the visitor counter.

11. **Tests**
I included unit tests for the Python code to ensure the functionality works as expected. These tests help maintain the integrity of the Lambda function.

12. **Infrastructure as Code**
I used the AWS Serverless Application Model (SAM) to define and deploy the API resources. This allowed me to automate the deployment process and manage infrastructure as code (IaC).

13. **Source Control**
All code, both for the back-end API and front-end website, is version-controlled using GitHub repositories. This setup ensures proper code management and tracking.

14. **CI/CD (Back end)**
For the back-end, I set up GitHub Actions that run tests and, upon passing, automatically package and deploy the SAM application to AWS whenever I push updates.

15. **CI/CD (Front end)**
For the front-end, I created a separate GitHub repository and configured GitHub Actions to automatically update the S3 bucket with new website code upon any push, while also invalidating the CloudFront cache as necessary.
